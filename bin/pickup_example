#!/usr/bin/env ruby
#
# © 2016 Shippo, Inc.
#
# License: MIT
#
# This example demonstrates how to purchase a label for a domestic US shipment.
# Please set +SHIPPO_TOKEN+ in the environment before running it.
#
# You can also set +SHIPPO_DEBUG+ to see detailed printouts of objects returned.
#
#

lib = File.expand_path('../../lib', __FILE__)
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)

require_relative 'config'
require 'bundler/setup'
require 'shippo'
require 'shippo/api/category'
require 'shippo/exceptions/api_error'
require 'awesome_print'
require 'json'
require 'date'

# Simple wrapper class to help us print objects to the STDOUT
class ExampleHelper
  def self.log_operation(msg)
    printf '%s', msg
    result = yield
    puts 'OK'
    result
  rescue Exception => e
    raise(e)
  end

  def self.dump_object(instance, msg = nil)
    return unless Shippo::API.debug?
    sep
    puts "#{msg.upcase}:" if msg
    puts "\#<#{instance.class.inspect}:0x#{instance.object_id.to_s(16)}> ⇒ "
    ap instance
    sep
    # See https://github.com/goshippo/shippo-ruby-client#resource-id-and-other-object-fields
    puts "Shippo object id: #{instance.object.id}"
    sep
  end

  def self.sep
    puts '—' * (ENV['COLUMNS'] || 80)
  end
end

# Create address_from object
address_from = {
  :name           => 'Mr Hippo',
  :company        => 'Shippo',
  :street1        => '215 Clayton St.',
  :street2        => '',
  :city           => 'San Francisco',
  :state          => 'CA',
  :zip            => '94117',
  :country        => 'US',
  :phone          => '+1 555 341 9393',
  :email          => 'support@goshippo.com' }

# Create address_to object
address_to   = {
  :name           => 'Mrs Hippo',
  :company        => 'Regents Park',
  :street1        => 'Outer Cir',
  :city           => 'London',
  :zip            => 'NW1 4RY',
  :country        => 'GB',
  :phone          => '+1 555 341 9393',
  :email          => 'ms-hippo@goshipppo.com',
	:metadata       => 'For Order Number 123' }

# Create parcel object
parcel       = {
  :length        => 5,
  :width         => 2,
  :height        => 5,
  :distance_unit => :in,
  :weight        => 2,
  :mass_unit     => :lb }

customs_item = {
    :description => 'T-Shirt',
    :quantity => '2',
    :net_weight => '400',
    :mass_unit => 'g',
    :value_amount => '20',
    :value_currency => 'USD',
    :origin_country => 'US',
    :tariff_number => '' }

customs_hash = {
    :contents_type => 'MERCHANDISE',
    :contents_explanation => 'T-Shirt purchase',
    :non_delivery_option => 'RETURN',
    :certify => true,
    :certify_signer => 'Mr Hippo',
    :items => [customs_item],
}


begin
  customs_declaration = ExampleHelper.log_operation 'Making first API call for customs declaration... ' do
    Shippo::CustomsDeclaration.create(customs_hash)
  end
  raise Shippo::Exceptions::UnsuccessfulResponseError.new(customs_declaration.object.inspect) unless customs_declaration.valid?
  File.open('example-pickup.json', 'w') do |file|
    file.puts JSON.dump(customs_declaration.to_hash)
  end

  hash = { 
    :object_purpose      => 'PURCHASE',
    :address_from        => address_from,
    :address_to          => address_to,
    :parcels             => [parcel],
    :customs_declaration => customs_declaration[:object_id],
    :async               => false }
    
  shipment = ExampleHelper.log_operation 'Making second API call for shipment rates... ' do
    Shippo::Shipment.create(hash)
  end
  raise Shippo::Exceptions::UnsuccessfulResponseError.new(shipment.object.inspect) unless shipment.success?
  File.open('example-pickup.json', 'a') do |file|
    file.puts JSON.dump(shipment.to_hash)
  end
rescue Shippo::Exceptions::APIServerError => e
  puts "Server returned an error:\n#{e}"
  exit 3
rescue Shippo::Exceptions::ConnectionError
  puts 'Error connecting to remote host. Is your Internet working?'
  exit 2
rescue Shippo::Exceptions::AuthenticationError
  if Shippo::API.token
    puts "Token '#{Shippo::API.token}' does not appear to be valid."
    puts 'Access denied.'
  else
    puts 'Please set authentication token in the environment:'
    puts 'export SHIPPO_TOKEN="<your token here>"'
    puts 'and re-run the example.'
  end
  exit 1
end

# Get the desired rate according to your business logic
# We select the first rate in this example
filtered_rates = shipment.rates.select {|rate| rate.provider.downcase == 'usps' || rate.provider.downcase == 'dhl_express' }
rate = filtered_rates.first

ExampleHelper.dump_object(rate, 'First rate returned')

transaction = ExampleHelper.log_operation 'Creating a label with the first rate in the list... ' do
  # Purchase the desired rate (create a Transaction object)
  Shippo::Transaction.create({rate: rate[:object_id], async: false})
end
File.open('example-pickup.json', 'a') do |file|
  file.puts JSON.dump(transaction.to_hash)
end
ExampleHelper.dump_object(transaction, 'Transaction object received')

if transaction.success?
  puts "Label URL      : #{
    # noinspection RubyResolve
  transaction.label_url }"
  puts "Tracking NO    : #{
    # noinspection RubyResolve
  transaction.tracking_number.to_s}"
else
  puts 'Transaction ERROR'
  puts transaction.messages
end

pickup_hash = {
  :carrier_account  => rate.carrier_account,
  :location => {
    :building_location_type => "Knock on Door",
    :address                => address_from
  },
  :transactions => [transaction[:object_id]],
  :requested_start_time => (Time.now + 24*60*60).strftime('%Y-%m-%dT%H:%M:%S.%LZ'),
  :requested_end_time => (Time.now + 2*24*60*60).strftime('%Y-%m-%dT%H:%M:%S.%LZ'),
  :is_test => true }

begin
    pickup = Shippo::Pickup.create(pickup_hash)
rescue => error
  if error.inspect.include? "You have already requested a"
    puts "You have already requested a pickup for today"
  else
    puts error.message
  end
else
  ap(pickup)
  File.open('example-pickup.json', 'a') do |file|
    file.puts JSON.dump(pickup.to_hash)

  end
  if pickup.confirm?
    puts "Pickup has been scheduled"
  else
    puts 'Transaction ERROR'
    puts pickup.messages
  end
end
