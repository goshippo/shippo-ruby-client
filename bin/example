#!/usr/bin/env ruby
#
# © 2016 Shippo, Inc.
#
# License: MIT
#
# This example demonstrates how to purchase a label for a domestic US shipment.
# Please set +SHIPPO_TOKEN+ in the environment before running it.
#
# You can also set +SHIPPO_DEBUG+ to see detailed printouts of objects returned.
#
#

lib = File.expand_path('../../lib', __FILE__)
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)

require 'bundler/setup'
require 'shippo'
require 'shippo/api/category'
require 'shippo/exceptions/api_error'
require 'awesome_print'
require 'json'

Shippo::API.token = ENV['SHIPPO_TOKEN']

# Simple wrapper class to help us print objects to the STDOUT
class ExampleHelper
  def self.log_operation(msg)
    printf '%s', msg
    result = yield
    puts 'OK'
    result
  rescue Exception => e
    raise(e)
  end

  def self.dump_object(instance, msg = nil)
    return unless Shippo::API.debug?
    sep
    puts "#{msg.upcase}:" if msg
    puts "\#<#{instance.class.inspect}:0x#{instance.object_id.to_s(16)}> ⇒ "
    ap instance
    sep
  end

  def self.sep
    puts '—' * (ENV['COLUMNS'] || 80)
  end
end

# Create address_from object
address_from = {
  :object_purpose => 'PURCHASE',
  :name           => 'Mr Hippo',
  :company        => 'Shippo',
  :street1        => '215 Clayton St.',
  :street2        => '',
  :city           => 'San Francisco',
  :state          => 'CA',
  :zip            => '94117',
  :country        => 'US',
  :phone          => '+1 555 341 9393',
  :email          => 'support@goshippo.com' }

# Create address_to object
address_to   = {
  :object_purpose => 'PURCHASE',
  :name           => 'Mrs Hippo"',
  :company        => 'San Diego Zoo',
  :street1        => '2920 Zoo Drive',
  :city           => 'San Diego',
  :state          => 'CA',
  :zip            => '92101',
  :country        => 'US',
  :phone          => '+1 555 341 9393',
  :email          => 'hippo@goshippo.com' }

# Create parcel object
parcel       = {
  :length        => 5,
  :width         => 2,
  :height        => 5,
  :distance_unit => :in,
  :weight        => 2,
  :mass_unit     => :lb }

hash = { :object_purpose => 'PURCHASE',
         :address_from   => address_from,
         :address_to     => address_to,
         :parcel         => parcel,
         :async          => false }

begin
  shipment = ExampleHelper.log_operation 'Making first API call for shipment rates... ' do
    Shippo::Shipment.create(hash)
  end
  raise Shippo::Exceptions::UnsuccessfulResponseError.new(shipment.object.inspect) unless shipment.success?
  File.open('example-shipment.json', 'w') do |file|
    file.puts JSON.dump(shipment.to_hash)
  end
rescue Shippo::Exceptions::APIServerError => e
  puts "Server returned an error:\n#{e}"
  exit 3
rescue Shippo::Exceptions::ConnectionError
  puts 'Error connecting to remote host. Is your Internet working?'
  exit 2
rescue Shippo::Exceptions::AuthenticationError
  if Shippo::API.token
    puts "Token '#{Shippo::API.token}' does not appear to be valid."
    puts 'Access denied.'
  else
    puts 'Please set authentication token in the environment:'
    puts 'export SHIPPO_TOKEN="<your token here>"'
    puts 'and re-run the example.'
  end
  exit 1
end

# Get the desired rate according to your business logic
# We select the first rate in this example
rate = shipment.rates_list.first
ExampleHelper.dump_object(rate, 'First rate returned')

transaction = ExampleHelper.log_operation 'Creating a label with the first rate in the list... ' do
  # Purchase the desired rate (create a Transaction object)
  Shippo::Transaction.create(rate: rate.id, async: false)
end
ExampleHelper.dump_object(transaction, 'Transaction object received')


if transaction.success?
  puts "Label URL      : #{
    # noinspection RubyResolve
  transaction.label_url }"
  puts "Tracking NO    : #{
    # noinspection RubyResolve
  transaction.tracking_number.to_s}"
else
  puts 'Transaction ERROR'
  puts transaction.messages
end
